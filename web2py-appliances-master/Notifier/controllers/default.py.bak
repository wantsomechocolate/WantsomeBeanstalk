# -*- coding: utf-8 -*-

me = auth.user_id

def index():
    if auth.user: redirect(URL('tasks'))
    return dict(message=T('Hello World'))

def error(message="not authorized"):
    session.flash = message
    redirect(URL('tasks'))

@auth.requires_login()
def tasks():
    db.task.created_on.readable = True
    db.task.created_by.readable = True
    db.task.title.represent = lambda title,row:\
        A(title,_href=URL('view_task',args=row.id))
    query = (db.task.assigned_to==me)|(db.task.created_by==me)    
    grid = SQLFORM.grid(query, orderby=~db.task.modified_on,
                        create=False,details=False,editable=False,
                        deletable=lambda row: (row.created_by==me),
                        fields=[
            db.task.status,            
            db.task.title,
            db.task.created_on,
            db.task.deadline,
            db.task.created_by,
            db.task.assigned_to,
            ])
    return locals()

@auth.requires_login()
def create_task():
    db.task.status.readable = False
    db.task.status.writable = False
    form = SQLFORM(db.task).process()
    if form.accepted:
        send_email(to=db.auth_user(form.vars.assigned_to).email,
                   sender=auth.user.email,
                   subject="New Task Assigned: %s" % form.vars.title,
                   message=form.vars.description)
        redirect(URL('tasks'))
    return locals()

@auth.requires_login()
def view_task():
    task_id = request.args(0,cast=int)
    task = db.task(task_id) or error()
    if not task.created_by==me and not task.assigned_to==me: error()
    db.post.task.default = task.id
    db.post.task.writable = db.post.task.readable = False
    def callback(form):
        user_id = task.created_by if task.assigned_to==me else task.assigned_to
        send_email(to=db.auth_user(user_id).email,
                   sender=auth.user.email,
                   subject="New Comment About: %s" % task.title,
                   message=form.vars.body)
    # form, posts = make_comments(callback)
    return locals()

@auth.requires_login()
def edit_task():
    task_id = request.args(0,cast=int)
    task = db.task(task_id) or error()
    if not task.created_by==me and not task.assigned_to==me: error()
    if task.created_by==me:
        task.assigned_to.writable = True
    else:
        task.assigned_to.writable = False
        task.status.requires=IS_IN_SET(('accepted','rejected','completed'))
    form = SQLFORM(db.task,task,
                   showid=False,
                   deletable=(task.created_by==me)).process()
    if form.accepted:
        email_to = db.auth_user(
            form.vars.assigned_to if task.created_by==me else task.created_b
            ).email
        send_email(to=email_to,sender=auth.user.email,
                   subject="Task Changed (%(status)s): %(title)s" % form.vars,
                   message=form.vars.description)
        redirect(URL('view_task',args=task.id))
    return locals()


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
