#!/usr/bin/python
# -*- coding: utf-8 -*-
# Author: iceberg at 21cn dot com
from gluon.sql import *
from gluon.validators import *
from gluon.sqlhtml import *
from gluon.compileapp import compile_application, remove_compiled_application
import os,glob,codecs,logging

class IS_EXIST:
  def __init__(self, error_message='File not exist'):
    self.error_message = error_message
  def __call__(self, value):
    import os
    return value, (None if os.path.exists(value) else self.error_message)

class Inno(object):
  '''
  Usage:
    def inno(): return {'':Inno(globals()).widget()}
  or:
    def inno():
      return {'':Inno(globals(),
        InnoEncoding='gb18030',needAdmin=True,needT3=True,needOfc=True).widget()}
  Dependency:
    yourapp/license # in utf8
    yourapp/about # in utf8, serves as the readme after install
    yourapp/static/logo.ico # optional
  '''
  # Must use raw string here, otherwise \readme becomes \13eadme
  TEMPLATE=r'''
  ; Script generated by the Inno Setup Script Wizard.
  ; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

  [Setup]
  ; NOTE: The value of AppId uniquely identifies this application.
  ; Do not use the same AppId value in installers for other applications.
  ; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
  AppId={{B26BB3BE-80D2-4319-B375-D7F71F7E9869}
  AppName=%(AppName)s
  AppVerName=%(AppVerName)s
  AppPublisher=%(AppPublisher)s
  AppPublisherURL=%(AppPublisherURL)s
  AppSupportURL=%(AppPublisherURL)s
  AppUpdatesURL=%(AppPublisherURL)s
  DefaultDirName=%(DefaultDirName)s
  ; Do not use space inside DefaultDirName. Web2py's cron can not deal with it now.
  DisableDirPage=%(DisableDirPage)s
  ; Put this iss script in web2py/applications/yourapp/cache, so here we use web2py.exe 's dir as SourceDir
  SourceDir=..\..\..
  DefaultGroupName=%(AppName)s
  LicenseFile=applications\%(application)s\cache\license.inno
  InfoAfterFile=applications\%(application)s\cache\about.inno
  OutputBaseFilename=setup
  Compression=lzma
  SolidCompression=yes

  [Languages]
  Name: "english"; MessagesFile: "compiler:Default.isl"

  [Tasks]
  Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

  [Dirs]
  Name: "{app}\applications\%(application)s\cache"
  ; Only setup EMPTY databases. Because using db files can not be copied.
  Name: "{app}\applications\%(application)s\databases"
  Name: "{app}\applications\%(application)s\errors"
  Name: "{app}\applications\%(application)s\models"
  Name: "{app}\applications\%(application)s\sessions"
  Name: "{app}\applications\%(application)s\tests"
  Name: "{app}\applications\%(application)s\uploads"
  Name: "{app}\applications\%(application)s\views"
  ; Setup the entrance part 1
  Name: "{app}\applications\init\sessions"

  [Files]
  ; Pick up files explicitly, in order to exclude unwanted files
  Source: "*.pyd"; DestDir: "{app}"; Flags: ignoreversion
  Source: "*.exe"; DestDir: "{app}"; Flags: ignoreversion
  Source: "*.dll"; DestDir: "{app}"; Flags: ignoreversion
  Source: "library.zip"; DestDir: "{app}"; Flags: ignoreversion
  Source: "ABOUT"; DestDir: "{app}"; Flags: ignoreversion
  Source: "LICENSE"; DestDir: "{app}"; Flags: ignoreversion
  Source: "README"; DestDir: "{app}"; Flags: ignoreversion
  Source: "VERSION"; DestDir: "{app}"; Flags: ignoreversion
  Source: "tcl\*"; DestDir: "{app}\tcl"; Flags: ignoreversion recursesubdirs createallsubdirs
  Source: "applications\__init__.py*"; DestDir: "{app}\applications"; Flags: ignoreversion

  Source: "applications\%(application)s\__init__.py*"; DestDir: "{app}\applications\%(application)s"; Flags: ignoreversion
  Source: "applications\%(application)s\ABOUT"; DestDir: "{app}\applications\%(application)s"; DestName: "README.TXT"; Flags: ignoreversion isreadme
  Source: "applications\%(application)s\*"; DestDir: "{app}\applications\%(application)s"; Flags: ignoreversion
  ; Some empty directories are build by [Dirs] section
  ; The following line will break if the app is not yet compiled
  Source: "applications\%(application)s\compiled\*"; DestDir: "{app}\applications\%(application)s\compiled"; Flags: ignoreversion recursesubdirs createallsubdirs
  Source: "applications\%(application)s\controllers\*.pyc";  DestDir: "{app}\applications\%(application)s\controllers"; Flags: ignoreversion recursesubdirs createallsubdirs
  Source: "applications\%(application)s\languages\*";  DestDir: "{app}\applications\%(application)s\languages"; Flags: ignoreversion recursesubdirs createallsubdirs
  Source: "applications\%(application)s\static\*";  DestDir: "{app}\applications\%(application)s\static"; Flags: ignoreversion recursesubdirs createallsubdirs

  ; Setup the entrance part 2
  Source: "applications\%(application)s\cache\default.py"; DestDir: "{app}\applications\init\controllers"; Flags: ignoreversion

  ; NOTE: Don't use "Flags: ignoreversion" on any shared system files
  '''
  TEMPLATE_MODULES=r'Source: "applications\%(application)s\modules\*.pyc";  DestDir: "{app}\applications\%(application)s\modules"; Flags: ignoreversion recursesubdirs createallsubdirs'
  TEMPLATE_PRIVATE=r'Source: "applications\%(application)s\private\*";  DestDir: "{app}\applications\%(application)s\private"; Flags: ignoreversion recursesubdirs createallsubdirs'
  TEMPLATE_CRON=r'Source: "applications\%(application)s\cron\*";  DestDir: "{app}\applications\%(application)s\cron"; Flags: ignoreversion recursesubdirs createallsubdirs'
  TEMPLATE_ADMIN=r'Source: "applications\admin\*"; DestDir: "{app}\applications\admin"; Flags: ignoreversion recursesubdirs createallsubdirs'
  TEMPLATE_T3=r'''
  Source: "applications\t3\__init__.py*"; DestDir: "{app}\applications\t3"; Flags: ignoreversion
  Source: "applications\t3\modules\*.pyc"; DestDir: "{app}\applications\t3\modules"; Flags: ignoreversion recursesubdirs createallsubdirs
  '''
  TEMPLATE_OFC=r'''
  Source: "applications\ofc\__init__.py*"; DestDir: "{app}\applications\ofc"; Flags: ignoreversion
  Source: "applications\ofc\modules\*.pyc"; DestDir: "{app}\applications\ofc\modules"; Flags: ignoreversion recursesubdirs createallsubdirs
  Source: "applications\ofc\static\*"; DestDir: "{app}\applications\ofc\static"; Flags: ignoreversion recursesubdirs createallsubdirs
  '''
  TEMPLATE_RUN=r'''
  [Icons]
  Name: "{group}\%(AppName)s"; Filename: "{app}\web2py.exe"; Parameters: "-i 0.0.0.0 -a ""<recycle>"""; WorkingDir: "{app}"; IconFilename: "{app}\applications\%(application)s\static\logo.ico"
  Name: "{commondesktop}\%(AppName)s"; Filename: "{app}\web2py.exe"; Parameters: "-i 0.0.0.0 -a ""<recycle>"""; Tasks: desktopicon; WorkingDir: "{app}"; IconFilename: "{app}\applications\%(application)s\static\logo.ico"
  Name: "{group}\Uninstall %(AppName)s"; Filename: "{uninstallexe}"

  [Run]
  Filename: "{app}\web2py.exe"; Parameters: "-i 0.0.0.0 -a ""<recycle>"""; Description: "{cm:LaunchProgram,%(AppName)s}"; Flags: nowait postinstall skipifsilent
  '''

  def __init__(self,environment,**kwargs):
    from gluon.storage import Storage
    self.environment = Storage(environment)
    self.db=DAL('sqlite://inno.db')#Same name appears later
    self.InnoEncoding=kwargs.get('InnoEncoding','gb18030')
    self.template='\r'.join([
      self.TEMPLATE,
      self.TEMPLATE_MODULES if glob.glob(os.path.join(
        self.environment.request.folder,'modules','*.pyc')) else '',
      self.TEMPLATE_CRON if glob.glob(os.path.join(
        self.environment.request.folder,'cron','*')) else '',
      self.TEMPLATE_PRIVATE if glob.glob(os.path.join(
        self.environment.request.folder,'private','*')) else '',
      self.TEMPLATE_ADMIN if kwargs.get('needAdmin') else '',
      self.TEMPLATE_T3 if kwargs.get('needT3') else '',
      self.TEMPLATE_OFC if kwargs.get('needOfc') else '',
      self.TEMPLATE_RUN,])
    self.db.define_table('innoinfo',
      Field('InnoCompiler','string',requires=IS_EXIST()),
      Field('AppName','string',requires=IS_NOT_EMPTY()),
      Field('AppVerName','string',requires=IS_NOT_EMPTY()),
      Field('AppPublisher','string',requires=IS_NOT_EMPTY()),
      Field('AppPublisherURL','string',requires=IS_URL()),
      Field('DefaultDirName','string',requires=IS_NOT_EMPTY()),
      Field('DisableDirPage','string',requires=IS_IN_SET({'yes':'Yes','no':'No'})),)
  def widget(self):
    request=self.environment.request
    response=self.environment.response
    T=self.environment.T
    form=SQLFORM(self.db.innoinfo,1,showid=False,col3={
      'InnoCompiler':'The full path of your Inno compiler. e.g. C:\Program Files\Inno Setup 5\Compil32.exe',
      'AppName':'e.g. My App',
      'AppVerName':'e.g. My App 1.0',
      'DefaultDirName':'No space allowed.  E.g. {sd}\MY_COMPANY\MY_APP',
      'DisableDirPage':'You might not want users to choose a directory that might break your app.',})
    if form.accepts(request,keepvalues=True):
      try: compile_application(request.folder)
      except (Exception, RestrictedError), e:
        response.flash = T('cannot compile. there are errors in your app. run it to debug it')
      else:
        codecs.open(os.path.join(request.folder,'cache','license.inno'),'w',self.InnoEncoding).write(
          codecs.open(os.path.join(request.folder,'license'),'r','utf8').read())
        codecs.open(os.path.join(request.folder,'cache','about.inno'),'w',self.InnoEncoding).write(
          codecs.open(os.path.join(request.folder,'about'),'r','utf8').read())
        open(os.path.join(request.folder,'cache','default.py'),'w').write('''
          def index(): redirect(URL(a='%s',c='default',f='index'))
          # Use this file to override the webcome/controllers/default.py
          '''.strip()%request.application)
        data={'application':request.application}
        data.update(request.vars)
        open(os.path.join(request.folder,'cache','setup.iss'),'wb').write(self.template%data)
        ret=os.system('"%s"/cc applications\%s\cache\setup.iss'
          %(request.vars.InnoCompiler,request.application))
        if ret:
          response.flash=T('Inno Compile Error: %d'%ret)
        else:
          response.flash = T('application compiled')
          response.headers['Content-disposition']="attachment;filename=%s_setup.exe"%request.application
          return response.stream(open(os.path.join(request.env.web2py_path,
            'Output','setup.exe'),'rb'),chunk_size=4096)
      finally: remove_compiled_application(request.folder)
    return form

class InnoAndHstart(Inno):
  def __init__(self,environment,**kwargs):
    logging.warn('This installer is partially based on hstart.exe (http://www.ntwind.com/software/utilities/hstart.html). You need to make sure you have the permission to redistribute it.')
    self.TEMPLATE+='\r%s\r'%'Source: "applications\inno\static\hstart.exe";  DestDir: "{app}"; Flags: ignoreversion'
    self.TEMPLATE_RUN=r'''
    [Icons]
    Name: "{group}\%(AppName)s (with Console)"; Filename: "{app}\web2py.exe"; Parameters: "-i 0.0.0.0 -a ""<recycle>"""; WorkingDir: "{app}"; IconFilename: "{app}\applications\%(application)s\static\logo.ico"
    Name: "{group}\%(AppName)s"; Filename: "{app}\hstart.exe"; Parameters: "%(param)s"; WorkingDir: "{app}"; IconFilename: "{app}\applications\%(application)s\static\logo.ico"
    Name: "{commondesktop}\%(AppName)s"; Filename: "{app}\hstart.exe"; Parameters: "%(param)s"; Tasks: desktopicon; WorkingDir: "{app}"; IconFilename: "{app}\applications\%(application)s\static\logo.ico"
    Name: "{group}\Uninstall %(AppName)s"; Filename: "{uninstallexe}"

    [Run]
    Filename: "{app}\hstart.exe"; Parameters: "%(param)s"; Description: "{cm:LaunchProgram,%(AppName)s}"; Flags: nowait postinstall skipifsilent
    '''%{'AppName':'%(AppName)s','application':'%(application)s',#to keep them intact
      'param':'/NOCONSOLE ""web2py.exe -i 0.0.0.0 -a """"<recycle>"""" -t""'}
    super(InnoAndHstart,self).__init__(environment,**kwargs)
